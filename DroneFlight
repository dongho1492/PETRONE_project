using Emgu.CV;
using Emgu.CV.CvEnum;
using Emgu.CV.Structure;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Runtime.InteropServices.WindowsRuntime;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Windows.Forms.DataVisualization.Charting;


using Windows.Devices.Bluetooth.GenericAttributeProfile;
using Windows.Devices.Enumeration;


using MathWorks.MATLAB.NET.Arrays;
using MathWorks.MATLAB.NET.Utility;
using matlab_Readtxt;
using ZedGraph;

using System.Drawing.Drawing2D;

namespace BLE_PAM
{
    public partial class DroneFlight : Form
    {
        DeviceInformationCollection m_Ble_Profile_List;
        GattDeviceService m_Ble_Service;
        IReadOnlyList<GattCharacteristic> m_Ble_Characteristic_List;

        public short ax;
        public short ay;
        public short az;
        public short gx;
        public short gy;
        public short gz;
        public double acc_y, acc_x, acc_z;

        public float a = 0.2f;
        public double pitch = 0, roll = 0, yaw = 0;
        public double temp;

        public const String PETRONE_CUSTOM_SERVICE_UUID = "C320DF00-7891-11E5-8BCF-FEFF819CDC9F";

        

        public DroneFlight()
        {
            InitializeComponent();
        }

        public async void TransferBleCommand(byte[] cmd)
        {

            m_Ble_Profile_List = await DeviceInformation.FindAllAsync(GattDeviceService.GetDeviceSelectorFromUuid(new Guid(PETRONE_CUSTOM_SERVICE_UUID)));
            m_Ble_Service = await GattDeviceService.FromIdAsync(m_Ble_Profile_List[Petrone_List.SelectedIndex].Id);
            m_Ble_Characteristic_List = m_Ble_Service.GetAllCharacteristics();
            m_Ble_Characteristic_List[0].ValueChanged += Value_Changed_Event_Handler;
            await m_Ble_Characteristic_List[0].WriteClientCharacteristicConfigurationDescriptorAsync(GattClientCharacteristicConfigurationDescriptorValue.Notify);
            // m_Ble_Characteristic_List[0] is C32DF01
            // m_Ble_Characteristic_List[1] is C32DF02
            if (m_Ble_Characteristic_List != null)
                await m_Ble_Characteristic_List[1].WriteValueAsync(cmd.AsBuffer(), GattWriteOption.WriteWithoutResponse);

            // check Rootin : Flag Petrone Busy 
            // Timer
        }

        public async void TransferBleNotifyCommand(byte[] cmd)
        {
            m_Ble_Profile_List = await DeviceInformation.FindAllAsync(GattDeviceService.GetDeviceSelectorFromUuid(new Guid(PETRONE_CUSTOM_SERVICE_UUID)));
            m_Ble_Service = await GattDeviceService.FromIdAsync(m_Ble_Profile_List[Petrone_List.SelectedIndex].Id);
            m_Ble_Characteristic_List = m_Ble_Service.GetAllCharacteristics();
            m_Ble_Characteristic_List[0].ValueChanged += Value_Changed_Event_Handler;
            await m_Ble_Characteristic_List[0].WriteClientCharacteristicConfigurationDescriptorAsync(GattClientCharacteristicConfigurationDescriptorValue.Notify);
            // m_Ble_Characteristic_List[0] is C32DF01
            // m_Ble_Characteristic_List[1] is C32DF02
            if (m_Ble_Characteristic_List != null)
            {
                await m_Ble_Characteristic_List[1].WriteValueAsync(cmd.AsBuffer(), GattWriteOption.WriteWithResponse);
            }
        }
        //트림 체크
        private void btnTrimCheck_Click(object sender, EventArgs e)
        {
            TransferBleCommand(new byte[] { 0x11, 0x90, 0x35 });
        }

        private void btnRollplus_Click(object sender, EventArgs e)
        {
            TransferBleCommand(new byte[] { 0x11, 0x90, 0x35 });

            TransferBleCommand(new byte[] { (byte)DataType.Command, (byte)CommandType.Trim, (byte)Trim.RollIncrease });
        }

        private void btnRollminus_Click(object sender, EventArgs e)
        {
            TransferBleCommand(new byte[] { 0x11, 0x90, 0x35 });

            TransferBleCommand(new byte[] { (byte)DataType.Command, (byte)CommandType.Trim, (byte)Trim.RollDecrease });
        }

        private void btnPitchplus_Click(object sender, EventArgs e)
        {
            TransferBleCommand(new byte[] { 0x11, 0x90, 0x35 });

            TransferBleCommand(new byte[] { (byte)DataType.Command, (byte)CommandType.Trim, (byte)Trim.PitchIncrease });
        }

        private void btnPitchminus_Click(object sender, EventArgs e)
        {
            TransferBleCommand(new byte[] { 0x11, 0x90, 0x35 });

            TransferBleCommand(new byte[] { (byte)DataType.Command, (byte)CommandType.Trim, (byte)Trim.PitchDecrease });
        }

        private void btnYawplus_Click(object sender, EventArgs e)
        {
            TransferBleCommand(new byte[] { 0x11, 0x90, 0x35 });

            TransferBleCommand(new byte[] { (byte)DataType.Command, (byte)CommandType.Trim, (byte)Trim.YawIncrease });
        }

        private void btnYawminus_Click(object sender, EventArgs e)
        {
            TransferBleCommand(new byte[] { 0x11, 0x90, 0x35 });

            TransferBleCommand(new byte[] { (byte)DataType.Command, (byte)CommandType.Trim, (byte)Trim.YawDecrease });
        }

        private void btnThrottleplus_Click(object sender, EventArgs e)
        {
            TransferBleCommand(new byte[] { 0x11, 0x90, 0x35 });

            TransferBleCommand(new byte[] { (byte)DataType.Command, (byte)CommandType.Trim, (byte)Trim.ThrottleIncrease });
        }

        private void btnThrottleminus_Click(object sender, EventArgs e)
        {
            TransferBleCommand(new byte[] { 0x11, 0x90, 0x35 });

            TransferBleCommand(new byte[] { (byte)DataType.Command, (byte)CommandType.Trim, (byte)Trim.ThrottleDecrease });
        }

        private void DroneFlight_Load(object sender, EventArgs e)
        {
            
        }

        private void btnEmergencyStop_Click(object sender, EventArgs e)
        {
            TransferBleCommand(new byte[] { (byte)DataType.Command, (byte)CommandType.FlightEvent, (byte)FlightEvent.Stop });
        }

        private void btntakeoff_Click(object sender, EventArgs e)
        {
            TransferBleCommand(new byte[] { (byte)DataType.Command, (byte)CommandType.FlightEvent, (byte)FlightEvent.TakeOff });
        }

        private void btnLanding_Click(object sender, EventArgs e)
        {
            TransferBleCommand(new byte[] { (byte)DataType.Command, (byte)CommandType.FlightEvent, (byte)FlightEvent.Landing });

        }


        //이륙 - 호버링 - 점차 하강
        private async void hovering_Click(object sender, EventArgs e)
        {
            TransferBleCommand(new byte[] { (byte)DataType.Command, (byte)CommandType.FlightEvent, (byte)FlightEvent.TakeOff });
            Delay(6000);
            byte[] cmd_j2 = { 0x10, 0, 0, 0, (-60 & 0xff) };
            await m_Ble_Characteristic_List[1].WriteValueAsync(cmd_j2.AsBuffer(), GattWriteOption.WriteWithoutResponse);
            Delay(1000);
            byte[] cmd_j3 = { 0x10, 0, 0, 0, (-60 & 0xff) };
            await m_Ble_Characteristic_List[1].WriteValueAsync(cmd_j3.AsBuffer(), GattWriteOption.WriteWithoutResponse);
            Delay(1000);
            byte[] cmd_a3 = { 0x10, 0, 0, 0, (-50 & 0xff) };
            await m_Ble_Characteristic_List[1].WriteValueAsync(cmd_a3.AsBuffer(), GattWriteOption.WriteWithoutResponse);
            Delay(500);

            TransferBleCommand(new byte[] { (byte)DataType.Command, (byte)CommandType.FlightEvent, (byte)FlightEvent.Landing });

        }

        public void Value_Changed_Event_Handler(GattCharacteristic sender, GattValueChangedEventArgs args)
        {
            byte[] receivedData = new byte[args.CharacteristicValue.Length];
            receivedData = args.CharacteristicValue.ToArray();


            if (receivedData[0] == 0x35)
            {
                richTextBox1.Clear();
                richTextBox1.AppendText("roll trim : " + BitConverter.ToInt16(receivedData, 1) + "\n");
                richTextBox1.AppendText("pitch trim : " + BitConverter.ToInt16(receivedData, 3) + "\n");
                richTextBox1.AppendText("yaw trim : " + BitConverter.ToInt16(receivedData, 5) + "\n");
                richTextBox1.AppendText("throttle trim : " + BitConverter.ToInt16(receivedData, 7) + "\n");
            }
        }

        public static DateTime Delay(int MS)
        {
            DateTime ThisMoment = DateTime.Now;
            TimeSpan duration = new TimeSpan(0, 0, 0, 0, MS);
            DateTime AfterWards = ThisMoment.Add(duration);

            while (AfterWards >= ThisMoment)
            {
                System.Windows.Forms.Application.DoEvents();
                ThisMoment = DateTime.Now;
            }

            return DateTime.Now;
        }

        private class Petrone_List
        {
            public static int SelectedIndex { get; internal set; }
        }
    }
}
